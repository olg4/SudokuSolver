# Algorithme Backtracking visant à résoudre
# un sudoku.
# Dès qu'une solution est trouvée, 
# le tableau rempli est retourné et 
# affiché. Les cases vides sont représentés
# par des 0 dans le la grille initiale.
# Affiche également le nombre de récursivité.


Lire le fichier texte qui contient la grille et remplir le tableau
depuis ce fichier.


classe Case
privé:
	réservé: booléen
	valeur: entier
public:
	contructeur Case(réservé: booléen, valeur: entier)
	méthode getRéservé() -> booléen
	méthode getValeur() -> entier
	méthode setValeur(valeur: entier)
fin classe


# paramètres:
# tab représente la grille
#
# dimTab représente la taille de la grille
# (en général 9x9, avec 3 carrés sur 3)
#
# dimCarré représente les dimensions d'un 
# carré (en général 3x3)
#
# retour: tableau final
algo sudoku(tab:nxn Case, dimCarré:entier, dimTab:entier)

	remplir(0, 0, dimCarré, tab, dimTab) 


# affiche la grille résolue
algo afficheSolution(tab:nxn Case, dimCarre:entier, dimTab:entier)

	afficher_ligne()
	pour i de 0 à dimTab faire
		afficher_séparateur()
		pour j de 0 à dimTab faire
			afficher tab[i][j].getValeur() et afficher_espace()
			si j != 0 ET j+1 mod dimCarre vaut 0 alors
				afficher_séparateur()
		passe à la ligne
		si i+1 mod dimCarre vaut 0 alors
			afficher_ligne()


# retourne un booléen
algo estRempli(tab:nxn Case, dimTab:entier)
	
	pour i de 0 à dimTab faire
		pour j de 0 à dimTab faire
			si tab[i][j].getValeur() vaut 0 alors
				retourne FAUX
	retourne VRAI


# teste une potientielle solution
# retourne un booléen
algo remplir(i:entier, j:entier, dimCarré:entier, tab:nxn Case, dimTab:entier) 
	
	si i vaut dimTab - 1 ET j vaut dimTab alors
		retourne VRAI
	si j >= dimTab ET i < dimTab alors
		j -> 0
		i ++

	si tab[i][j].getReserve() alors
		retourne remplir(i, j+1, dimCarre, tab, dimTab)

	pour chiffre de 1 à dimTab faire
		si estValide(i, j, tab, dimCarre, dimTab, chiffre)
			tab[i][j].setValeur(chiffre)
			si remplir(i, j+1, dimCarre, tab, dimTab) alors
				retourne VRAI

	tab[i][j].setValeur(0)
	retourne FAUX	



# retourne vrai si le chiffre remplit
# toutes les conditions avant de
# l'écrire dans la grille
algo estValide(i:entier, j:entier, tab:nxn Case, dimCarré:entier, dimTab:entier,chiffre:entier)

	retourne uniqueCarré(i, j, tab, dimCarré, dimTab, chiffre) ET
		 uniqueLigne(i, j, tab, dimTab, chiffre) ET
		 uniqueColonne(i, j, tab, dimTab, chiffre)
			

# vérifie si le chiffre n'est pas déjà 
# présent dans le carré
#
# retourne un booléen
algo uniqueCarré(i:entier, j:entier, tab:nxn Case, dimCarré:entier, dimTab:entier,chiffre:entier)

	ligne: entier
	col: entier
	k: entier
	l: entier
	existeDéjà: booléen
	
	ligne -> i - (i mod dimCarre)
	k -> 0
	existeDéjà -> FAUX
	
	tant que k < dimCarre ET NON existeDéjà faire
		l -> 0
		col -> j - (j mod dimCarre)
		tant que l < dimCarre ET NON existeDéjà faire
			si tab[ligne][col].getValeur() vaut chiffre faire
				existeDéjà -> VRAI
			l ++
			col ++
		k ++
		ligne ++
		
	retourne NON existeDéjà

		

# vérifie que le chiffre est unique
# horizontalement
#
# retourne un booléen
algo uniqueLigne(i:entier, j:entier, tab:nxn Case, dimTab:entier, chiffre:entier)

	ligne: entier
	ligne -> 0
	existeDéjà: booléen
	existeDéjà -> FAUX
	
	tant que ligne < dimTab NON existeDéjà faire
		si tab[ligne][j].getValeur() vaut chiffre alors
			existeDéjà -> VRAI

		ligne ++

	retourne NON existeDéjà



# vérifie que le chiffre est unique 
# verticalement
# 
# retourne un booléen
algo uniqueColonne(i:entier, j:entier, tab:nxn Case, dimTab:entier, chiffre:entier)

	col: entier
	col -> 0
	existeDéjà: booléen
	existeDéjà -> FAUX
	tant que col < dimTab ET NON existeDéjà faire
		si tab[i][col].getValeur() vaut chiffre alors
			existeDéjà -> VRAI

		col++

	retourne NON existeDéjà
